from pprint import pprint
import asyncio

from database import get_db

PRIMARY_KEY = "integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY"


async def create_dora_bora(admin_db):
    await admin_db.raw("CREATE DATABASE dora_bora")
    return await get_db("dora_bora")


async def create_tables(db):
    print("Creating servers table.")
    await db.raw(
        """CREATE TYPE server_state
            AS ENUM ('offline', 'online', 'maintenance')"""
    )
    await db.raw(
        """CREATE TABLE servers
        (
            id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
            name text NOT NULL,
            host text NOT NULL,
            port integer NOT NULL,
            state server_state NOT NULL DEFAULT 'offline',
            subscriber_only boolean NOT NULL,
            PRIMARY KEY (id),
            CONSTRAINT name UNIQUE (name)
        )"""
    )

    print("Creating accounts table.")
    await db.raw(
        """CREATE TYPE account_state
            AS ENUM ('offline', 'in_login', 'in_game', 'banned')"""
    )
    await db.raw(
        """CREATE TABLE accounts
        (
            id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
            username text NOT NULL,
            nickname text NOT NULL,
            password text NOT NULL,
            state account_state NOT NULL,
            subscribed_seconds integer DEFAULT null,
            is_game_master boolean NOT NULL DEFAULT false,
            security_question text NOT NULL,
            PRIMARY KEY (id),
            CONSTRAINT username UNIQUE (username),
            CONSTRAINT nickname UNIQUE (nickname)
        )"""
    )

    print("Creating characters table.")
    await db.raw(
        """CREATE TABLE characters
        (
            id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
            server_id integer NOT NULL,
            account_id integer NOT NULL,
            PRIMARY KEY (id),
            CONSTRAINT server FOREIGN KEY (server_id)
                REFERENCES servers (id) MATCH SIMPLE
                ON UPDATE NO ACTION
                ON DELETE CASCADE
                NOT VALID,
            CONSTRAINT account FOREIGN KEY (account_id)
                REFERENCES accounts (id) MATCH SIMPLE
                ON UPDATE NO ACTION
                ON DELETE CASCADE
                NOT VALID
        )"""
    )


async def seed_dora_bora(db):
    print("Seeding DoraBora...")
    print("inserting servers:")
    servers = (
        await db.table("servers")
        .insert(
            {
                "name": "first",
                "host": "127.0.0.1",
                "port": "4445",
                "subscriber_only": "false",
            },
            {
                "name": "second",
                "host": "127.0.0.1",
                "port": "4446",
                "subscriber_only": "true",
            },
            {
                "name": "third",
                "host": "127.0.0.1",
                "port": "4447",
                "state": "online",
                "subscriber_only": "false",
            },
            {
                "name": "fourth",
                "host": "127.0.0.1",
                "port": "4448",
                "state": "maintenance",
                "subscriber_only": "false",
            },
            {
                "name": "fifth",
                "host": "127.0.0.1",
                "port": "4449",
                "state": "online",
                "subscriber_only": "true",
            },
        )
        .returning()
    )
    pprint(servers)
    print("\ninserting accounts:")
    account = (
        await db.table("accounts")
        .insert(
            {
                "username": "qwe",
                "nickname": "qweplspls",
                "password": "password",
                "state": "offline",
                "subscribed_seconds": 1000000,
                "is_game_master": "false",
                "security_question": "isItPls",
            }
        )
        .returning()
    )[0]
    pprint(account)
    print("\ninserting characters:")
    for server in servers:
        character = (
            await db.table("characters")
            .insert(
                {
                    "server_id": server["id"],
                    "account_id": account["id"],
                }
            )
            .returning()
        )
        pprint(character)
    print("Done.\n")


async def main():
    print("Connecting to admin db: postgres.")
    admin_db = await get_db("postgres")
    print("Dropping all previous connections.")
    await admin_db.raw(
        """SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE pg_stat_activity.datname = 'dora_bora'
              AND pid <> pg_backend_pid();"""
    )
    print("Dropping previous DoraBora")
    await admin_db.raw("DROP DATABASE IF EXISTS dora_bora")
    print("Creating new DoraBora.")
    db = await create_dora_bora(admin_db)
    await create_tables(db)
    await seed_dora_bora(db)


if __name__ == "__main__":
    asyncio.run(main())
