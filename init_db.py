import sys
from pprint import pprint

from dora_bora.database.base import BaseDatabase
from dora_bora.database import (
    AccountsDatabase,
    ServersDatabase,
    CharactersDatabase,
)

PRIMARY_KEY = "integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY"


def drop_db(db, dbname):
    print("Dropping database", dbname)
    db.execute(  # Clear existing connections
        """SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE pg_stat_activity.datname = %s
              AND pid <> pg_backend_pid();""",
        [dbname],
    )

    db.execute(f"DROP DATABASE IF EXISTS {dbname};")
    print("Done.\n")


def create_db(admin_db, dbname):
    print("Creating database", dbname)
    admin_db.execute(f"CREATE DATABASE {dbname};")


def create_tables(dbname):
    db = BaseDatabase(dbname)
    print("Creating", dbname, "servers table.")
    db.execute(
        """CREATE TYPE server_state
            AS ENUM ('offline', 'online', 'maintenance');"""
    )
    db.execute(
        """CREATE TABLE servers
        (
            id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
            name text NOT NULL,
            host text NOT NULL,
            port integer NOT NULL,
            state server_state NOT NULL DEFAULT 'offline',
            subscriber_only boolean NOT NULL,
            PRIMARY KEY (id),
            CONSTRAINT name UNIQUE (name)
        );"""
    )

    print("Creating", dbname, "accounts table.")
    db.execute(
        """CREATE TYPE account_state
            AS ENUM ('offline', 'in_login', 'in_game', 'banned');"""
    )
    db.execute(
        """CREATE TABLE accounts
        (
            id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
            username text NOT NULL,
            nickname text NOT NULL,
            password text NOT NULL,
            state account_state NOT NULL DEFAULT 'offline',
            subscribed_seconds integer DEFAULT null,
            is_game_master boolean NOT NULL DEFAULT false,
            security_question text NOT NULL,
            community integer NOT NULL,
            PRIMARY KEY (id),
            CONSTRAINT username UNIQUE (username),
            CONSTRAINT nickname UNIQUE (nickname)
        );"""
    )

    print("Creating", dbname, "characters table.")
    db.execute(
        """CREATE TABLE characters
        (
            id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
            server_id integer NOT NULL,
            account_id integer NOT NULL,
            PRIMARY KEY (id),
            CONSTRAINT server FOREIGN KEY (server_id)
                REFERENCES servers (id) MATCH SIMPLE
                ON UPDATE NO ACTION
                ON DELETE CASCADE
                NOT VALID,
            CONSTRAINT account FOREIGN KEY (account_id)
                REFERENCES accounts (id) MATCH SIMPLE
                ON UPDATE NO ACTION
                ON DELETE CASCADE
                NOT VALID
        );"""
    )


def seed_dora_bora(dbname):
    print("Seeding", dbname)
    print("inserting servers:")
    servers_db = ServersDatabase(dbname)
    servers = [
        servers_db.create(server)
        for server in [
            {
                "name": "first",
                "host": "127.0.0.1",
                "port": "4446",
                "subscriber_only": "true",
            }
        ]
    ]
    pprint(servers)

    print("\ninserting account:")
    accounts_db = AccountsDatabase(dbname)
    account = accounts_db.create(
        {
            "username": "qwe",
            "nickname": "qweplspls",
            "password": "password",
            "subscribed_seconds": 1000000,
            "is_game_master": "false",
            "security_question": "isItPls",
            "community": 0,
        }
    )
    pprint(account)

    print("\ninserting characters:")
    characters_db = CharactersDatabase(dbname)
    for server in servers:
        pprint(
            characters_db.create(
                {
                    "server_id": server.id,
                    "account_id": account.id,
                }
            )
        )
    print("Done.\n")


def main(dbname):
    admin_db = BaseDatabase("postgres")
    drop_db(admin_db, dbname)
    create_db(admin_db, dbname)
    create_tables(dbname)
    seed_dora_bora(dbname)


if __name__ == "__main__":
    dbname = sys.argv[1]
    main(dbname)
